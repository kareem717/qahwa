name: Deploy
on:
  push:
    branches:
      - main
    paths:
      - 'apps/api/**'
      - 'apps/landing/**'
      - 'apps/desktop/**'
  workflow_dispatch:
    inputs:
      publish_electron:
        description: 'Publish Electron App'
        required: false
        default: false
        type: boolean

jobs:
  deploy-api:
    name: Deploy API to Cloudflare Workers
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: contains(github.event.head_commit.modified, 'apps/api/') || contains(github.event.head_commit.added, 'apps/api/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install API Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build & Deploy Worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'apps/api'

  deploy-landing:
    name: Deploy Landing Page to Cloudflare Pages
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'apps/landing/') || contains(github.event.head_commit.added, 'apps/landing/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Wrangler CLI
        run: pnpm add -g wrangler@3.90.0

      - name: Install Landing App Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Landing Page
        run: cd apps/landing && pnpm run build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'apps/landing'
          command: pages deploy ./dist
          wranglerVersion: '3.90.0'

  build-and-publish-electron:
    name: Build and Publish Electron App
    runs-on: macos-latest
    timeout-minutes: 60
    # Only run when manually triggered with the publish_electron input set to true
    if: github.event_name == 'workflow_dispatch' && inputs.publish_electron == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Desktop App Dependencies
        run: pnpm install --frozen-lockfile
        working-directory: 'apps/desktop'

      - name: Build Native Modules
        run: |
          # Build the native audio module if needed
          if [ -d "../../packages/osx-audio" ]; then
            cd ../../packages/osx-audio
            pnpm install
            pnpm run build || echo "Native module build failed, continuing..."
            cd ../../apps/desktop
          fi
        working-directory: 'apps/desktop'

      - name: Build and Publish to R2
        run: pnpm i && pnpm run publish
        working-directory: 'apps/desktop'
        env:
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          APPLE_DEVELOPER_IDENTITY: ${{ secrets.APPLE_DEVELOPER_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_SIGN_IN_URL: ${{ secrets.VITE_SIGN_IN_URL }}
