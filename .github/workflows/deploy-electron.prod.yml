name: Deploy Electron App

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - none
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

jobs:
  build-and-publish-electron:
    name: Build and Publish Electron App
    runs-on: macos-latest
    timeout-minutes: 90
    environment: production
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Import Code Signing Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          echo "Available code signing identities:"
          security find-identity -v -p codesigning $KEYCHAIN_PATH

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Version bump
        if: inputs.version_bump != 'none'
        run: |
          cd apps/desktop
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          NEW_VERSION=$(node -e "
            const fs = require('fs');
            const path = require('path');
            
            // Read current package.json
            const pkgPath = 'package.json';
            const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
            const currentVersion = pkg.version;
            const [major, minor, patch] = currentVersion.split('.').map(Number);
            
            let newVersion;
            switch('${{ inputs.version_bump }}') {
              case 'major':
                newVersion = \`\${major + 1}.0.0\`;
                break;
              case 'minor':
                newVersion = \`\${major}.\${minor + 1}.0\`;
                break;
              case 'patch':
                newVersion = \`\${major}.\${minor}.\${patch + 1}\`;
                break;
              default:
                throw new Error('Invalid version bump type');
            }
            
            pkg.version = newVersion;
            fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
            
            console.log(newVersion);
          ")
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Updated version to $NEW_VERSION"

      - name: Get current version for non-bump builds
        if: inputs.version_bump == 'none'
        run: |
          cd apps/desktop
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Build Native Modules
        run: |
          if [ -d "packages/osx-audio" ]; then
            cd packages/osx-audio
            pnpm install
            pnpm run build || echo "Native module build failed, continuing..."
          fi

      - name: Build and Publish to R2
        run: pnpm install && pnpm run publish
        working-directory: 'apps/desktop'
        env:
          NODE_ENV: 'production'
          R2_ACCESS_KEY_ID: '${{ secrets.R2_ACCESS_KEY_ID }}'
          R2_SECRET_ACCESS_KEY: '${{ secrets.R2_SECRET_ACCESS_KEY }}'
          VITE_R2_BUCKET_NAME: '${{ vars.RELEASE_S3_BUCKET_NAME }}'
          VITE_R2_ENDPOINT: '${{ vars.PUBLIC_R2_URL }}'
          R2_S3_API_ENDPOINT: ${{ secrets.R2_S3_API_ENDPOINT }}
          VITE_DESKTOP_PROTOCOL: '${{ vars.DESKTOP_PROTOCOL }}'
          CSC_NAME: ${{ secrets.APPLE_DEVELOPER_IDENTITY }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          VITE_API_URL: '${{ vars.API_URL }}'
          VITE_SIGN_IN_URL: '${{ vars.LANDING_URL }}/app-redirect'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ vars.SENTRY_DSN }}
          VERSION: ${{ env.NEW_VERSION }}

      - name: Manage S3 Release Versions
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          S3_ENDPOINT: ${{ secrets.R2_S3_API_ENDPOINT }}
          BUCKET_NAME: ${{ vars.RELEASE_S3_BUCKET_NAME }}
        run: |
          # Install AWS CLI if not available
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
            sudo installer -pkg AWSCLIV2.pkg -target /
          fi

          # Function to copy and manage S3 objects
          manage_s3_releases() {
            local platform_arch=$1
            local file_extension=$2
            local version=${{ env.NEW_VERSION }}
            
            # Source: the versioned file that was just uploaded
            local source_key="releases/v${version}-${platform_arch}.${file_extension}"
            
            # Target: the latest file
            local latest_key="releases/latest-${platform_arch}.${file_extension}"
            
            echo "Managing releases for ${platform_arch}..."
            
            # Check if the source file exists
            if aws s3api head-object --endpoint-url="$S3_ENDPOINT" --bucket="$BUCKET_NAME" --key="$source_key" 2>/dev/null; then
              echo "Found source file: $source_key"
              
              # Check if there's already a latest file, and if so, we need to version it
              if aws s3api head-object --endpoint-url="$S3_ENDPOINT" --bucket="$BUCKET_NAME" --key="$latest_key" 2>/dev/null; then
                echo "Found existing latest-${platform_arch}.${file_extension}, checking for version tag..."
                
                # Get the version tag from the existing latest file's metadata
                old_version=$(aws s3api head-object --endpoint-url="$S3_ENDPOINT" --bucket="$BUCKET_NAME" --key="$latest_key" --query 'Metadata.version' --output text 2>/dev/null || echo "unknown")
                
                if [ "$old_version" != "None" ] && [ "$old_version" != "unknown" ] && [ "$old_version" != "" ]; then
                  # Copy the old latest to a versioned name
                  local old_versioned_key="releases/v${old_version}-${platform_arch}.${file_extension}"
                  echo "Backing up old latest as $old_versioned_key"
                  
                  # Only copy if the versioned file doesn't already exist
                  if ! aws s3api head-object --endpoint-url="$S3_ENDPOINT" --bucket="$BUCKET_NAME" --key="$old_versioned_key" 2>/dev/null; then
                    aws s3api copy-object --endpoint-url="$S3_ENDPOINT" \
                      --copy-source "$BUCKET_NAME/$latest_key" \
                      --bucket "$BUCKET_NAME" \
                      --key "$old_versioned_key"
                  fi
                fi
              fi
              
              # Copy the new version to latest (with version metadata)
              # Use s3api copy-object to avoid tagging issues with R2
              echo "Setting v${version}-${platform_arch}.${file_extension} as latest-${platform_arch}.${file_extension}"
              aws s3api copy-object --endpoint-url="$S3_ENDPOINT" \
                --copy-source "$BUCKET_NAME/$source_key" \
                --bucket "$BUCKET_NAME" \
                --key "$latest_key" \
                --metadata "version=${version}" \
                --metadata-directive REPLACE
            else
              echo "Warning: Source file $source_key not found, skipping $platform_arch"
            fi
          }

          # Manage releases for each platform/architecture combination
          manage_s3_releases "darwin-arm64" "zip"

      - name: List final S3 structure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          S3_ENDPOINT: ${{ secrets.R2_S3_API_ENDPOINT }}
          BUCKET_NAME: ${{ vars.RELEASE_S3_BUCKET_NAME }}
        run: |
          echo "Final S3 release structure:"
          aws s3 ls --endpoint-url="$S3_ENDPOINT" "s3://$BUCKET_NAME/releases/" --recursive

      - name: Commit version bump
        if: inputs.version_bump != 'none'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add apps/desktop/package.json
          git commit -m "chore(desktop): bump version to ${{ env.NEW_VERSION }}"
          git push

      - name: Create Release
        if: inputs.version_bump != 'none'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: electron-v${{ env.NEW_VERSION }}
          name: Electron App v${{ env.NEW_VERSION }}
          body: |
            ${{ inputs.release_notes || 'Automated release of Electron app' }}
            
            Version: ${{ env.NEW_VERSION }}
            
            ## Download Links
            - Latest macOS (ARM64): ${{ vars.PUBLIC_R2_URL }}/releases/latest-darwin-arm64.zip
            - Latest macOS (Intel): ${{ vars.PUBLIC_R2_URL }}/releases/latest-darwin-x64.zip
            - Versioned macOS (ARM64): ${{ vars.PUBLIC_R2_URL }}/releases/v${{ env.NEW_VERSION }}-darwin-arm64.zip
            - Versioned macOS (Intel): ${{ vars.PUBLIC_R2_URL }}/releases/v${{ env.NEW_VERSION }}-darwin-x64.zip
            
            ## Changes
            - Built and published to R2
            - Code signed and notarized for macOS
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
          rm -f $RUNNER_TEMP/build_certificate.p12 || true
