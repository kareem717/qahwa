// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Import types from the osx-audio package
import type { PermissionResult, DeviceType, AECConfig } from "@qahwa/osx-audio";
import type {
  UpdateInfo,
  UpdateError,
} from "./lib/helpers/ipc/update/update-context";
import type { AECAudioData } from "./lib/helpers/ipc/aec-audio/aec-audio-context";

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}

interface WindowContext {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

interface AuthContext {
  handleAuthCallback: (callback: (url: string) => Promise<void> | void) => () => void;
  setToken: (token: string) => Promise<void>;
  getToken: () => Promise<string>;
  removeToken: () => Promise<void>;
}

interface ElectronSystemAudio {
  getPermissions: () => Promise<PermissionResult>;
  startCapture: (systemCallback: (data: ArrayBuffer) => void) => () => void;
  stopCapture: () => void;
  requestPermissions: (deviceType: DeviceType) => Promise<PermissionResult>;
}

interface ElectronAECAudio {
  getPermissions: () => Promise<PermissionResult>;
  requestPermissions: (deviceType: DeviceType) => Promise<PermissionResult>;
  getConfig: () => Promise<AECConfig>;
  updateConfig: (config: AECConfig) => Promise<void>;
  getDefaultConfig: () => Promise<AECConfig>;
  isActive: () => Promise<boolean>;
  startCapture: (callback: (data: AECAudioData) => void) => () => void;
  stopCapture: () => void;
}

interface ElectronUpdater {
  installUpdate: () => Promise<void>;
  checkForUpdates: () => Promise<void>;
  onUpdateAvailable: (callback: () => void) => () => void;
  onUpdateDownloaded: (
    callback: (updateInfo: UpdateInfo) => void,
  ) => () => void;
  onUpdateError: (callback: (error: UpdateError) => void) => () => void;
  onUpdateChecking: (callback: () => void) => () => void;
  onUpdateNotAvailable: (callback: () => void) => () => void;
}

declare global {
  interface Window {
    themeMode: ThemeModeContext;
    electronWindow: WindowContext;
    electronAuth: AuthContext;
    electronSystemAudio: ElectronSystemAudio;
    electronAECAudio: ElectronAECAudio;
    electronUpdater: ElectronUpdater;
  }
}
