/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LegalRouteImport } from './routes/_legal/route'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as homeIndexImport } from './routes/(home)/index'
import { Route as LegalTermsImport } from './routes/_legal/terms'
import { Route as LegalPrivacyImport } from './routes/_legal/privacy'
import { Route as AuthSignOutImport } from './routes/_auth/sign-out'
import { Route as AuthSignInImport } from './routes/_auth/sign-in'
import { Route as AuthAppRedirectImport } from './routes/_auth/app-redirect'
import { Route as dashboardDashboardImport } from './routes/(dashboard)/dashboard'

// Create/Update Routes

const LegalRouteRoute = LegalRouteImport.update({
  id: '/_legal',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const homeIndexRoute = homeIndexImport.update({
  id: '/(home)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LegalTermsRoute = LegalTermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => LegalRouteRoute,
} as any)

const LegalPrivacyRoute = LegalPrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => LegalRouteRoute,
} as any)

const AuthSignOutRoute = AuthSignOutImport.update({
  id: '/sign-out',
  path: '/sign-out',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthAppRedirectRoute = AuthAppRedirectImport.update({
  id: '/app-redirect',
  path: '/app-redirect',
  getParentRoute: () => AuthRouteRoute,
} as any)

const dashboardDashboardRoute = dashboardDashboardImport.update({
  id: '/(dashboard)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_legal': {
      id: '/_legal'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LegalRouteImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/dashboard': {
      id: '/(dashboard)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof dashboardDashboardImport
      parentRoute: typeof rootRoute
    }
    '/_auth/app-redirect': {
      id: '/_auth/app-redirect'
      path: '/app-redirect'
      fullPath: '/app-redirect'
      preLoaderRoute: typeof AuthAppRedirectImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/sign-out': {
      id: '/_auth/sign-out'
      path: '/sign-out'
      fullPath: '/sign-out'
      preLoaderRoute: typeof AuthSignOutImport
      parentRoute: typeof AuthRouteImport
    }
    '/_legal/privacy': {
      id: '/_legal/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof LegalPrivacyImport
      parentRoute: typeof LegalRouteImport
    }
    '/_legal/terms': {
      id: '/_legal/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof LegalTermsImport
      parentRoute: typeof LegalRouteImport
    }
    '/(home)/': {
      id: '/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthAppRedirectRoute: typeof AuthAppRedirectRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignOutRoute: typeof AuthSignOutRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthAppRedirectRoute: AuthAppRedirectRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignOutRoute: AuthSignOutRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface LegalRouteRouteChildren {
  LegalPrivacyRoute: typeof LegalPrivacyRoute
  LegalTermsRoute: typeof LegalTermsRoute
}

const LegalRouteRouteChildren: LegalRouteRouteChildren = {
  LegalPrivacyRoute: LegalPrivacyRoute,
  LegalTermsRoute: LegalTermsRoute,
}

const LegalRouteRouteWithChildren = LegalRouteRoute._addFileChildren(
  LegalRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof LegalRouteRouteWithChildren
  '/dashboard': typeof dashboardDashboardRoute
  '/app-redirect': typeof AuthAppRedirectRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-out': typeof AuthSignOutRoute
  '/privacy': typeof LegalPrivacyRoute
  '/terms': typeof LegalTermsRoute
  '/': typeof homeIndexRoute
}

export interface FileRoutesByTo {
  '': typeof LegalRouteRouteWithChildren
  '/dashboard': typeof dashboardDashboardRoute
  '/app-redirect': typeof AuthAppRedirectRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-out': typeof AuthSignOutRoute
  '/privacy': typeof LegalPrivacyRoute
  '/terms': typeof LegalTermsRoute
  '/': typeof homeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_legal': typeof LegalRouteRouteWithChildren
  '/(dashboard)/dashboard': typeof dashboardDashboardRoute
  '/_auth/app-redirect': typeof AuthAppRedirectRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-out': typeof AuthSignOutRoute
  '/_legal/privacy': typeof LegalPrivacyRoute
  '/_legal/terms': typeof LegalTermsRoute
  '/(home)/': typeof homeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/dashboard'
    | '/app-redirect'
    | '/sign-in'
    | '/sign-out'
    | '/privacy'
    | '/terms'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/dashboard'
    | '/app-redirect'
    | '/sign-in'
    | '/sign-out'
    | '/privacy'
    | '/terms'
    | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_legal'
    | '/(dashboard)/dashboard'
    | '/_auth/app-redirect'
    | '/_auth/sign-in'
    | '/_auth/sign-out'
    | '/_legal/privacy'
    | '/_legal/terms'
    | '/(home)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LegalRouteRoute: typeof LegalRouteRouteWithChildren
  dashboardDashboardRoute: typeof dashboardDashboardRoute
  homeIndexRoute: typeof homeIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LegalRouteRoute: LegalRouteRouteWithChildren,
  dashboardDashboardRoute: dashboardDashboardRoute,
  homeIndexRoute: homeIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_legal",
        "/(dashboard)/dashboard",
        "/(home)/"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/app-redirect",
        "/_auth/sign-in",
        "/_auth/sign-out"
      ]
    },
    "/_legal": {
      "filePath": "_legal/route.tsx",
      "children": [
        "/_legal/privacy",
        "/_legal/terms"
      ]
    },
    "/(dashboard)/dashboard": {
      "filePath": "(dashboard)/dashboard.tsx"
    },
    "/_auth/app-redirect": {
      "filePath": "_auth/app-redirect.tsx",
      "parent": "/_auth"
    },
    "/_auth/sign-in": {
      "filePath": "_auth/sign-in.tsx",
      "parent": "/_auth"
    },
    "/_auth/sign-out": {
      "filePath": "_auth/sign-out.tsx",
      "parent": "/_auth"
    },
    "/_legal/privacy": {
      "filePath": "_legal/privacy.tsx",
      "parent": "/_legal"
    },
    "/_legal/terms": {
      "filePath": "_legal/terms.tsx",
      "parent": "/_legal"
    },
    "/(home)/": {
      "filePath": "(home)/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
